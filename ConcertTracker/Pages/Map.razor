@page "/map"

@using Radzen
@using BusinessLayer.Interfaces
@using DataLayer.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;

@inject UserManager<User> userManager
@inject IConcertRepository ConcertRepository
@inject IConcertHallRepository ConcertHallRep
@inject IUserRepository UserRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="mapPage">
    <a href="" class="mainText">ConcertTracker</a>
    <div class="mapContainer">
        <div class="map">
            <RadzenGoogleMap Style="width:auto; height:100%;" Zoom="@zoom" Center="@(pos)" MapClick="@OnMapClick" MarkerClick="@OnMarkerClick">
                <Markers>
                    <RadzenGoogleMapMarker Title="User" Label="Current Marker" Position="@(new GoogleMapPosition() { Lat = pos.Lat, Lng = pos.Lng })"></RadzenGoogleMapMarker>
                    @if (concerts != null)
                        foreach (var concert in concerts)
                        {
                            <RadzenGoogleMapMarker Title="@concert.Id.ToString()" Label="@concert.Date.ToString()" Position="@concert.Position"></RadzenGoogleMapMarker>
                        }
                </Markers>
            </RadzenGoogleMap>
        </div>
        <EditForm Model="@newConcert" OnValidSubmit="@InsertConcert" class="concertInfo">
            @if (isArtist && (concertArtists.Contains(artist) || concertArtists.Count == 0))
            {
                <a class="hdr">Дата концерта:</a>
                <InputDate class="myDate" id="date" @bind-Value="@newConcert.Date" />
                if (newConcert.ConcertHall != null)
                {
                    <a class="hdr">Концертная площадка:</a>
                    <a href="/concerthall/@newConcert.ConcertHall.Id" class="hdr" Style="font-size:18px;">@newConcert.ConcertHall.Address</a>
                }
                <a class="hdr">Артисты:</a>
                foreach (var artist in concertArtists)
                {
                    <a href="/user/@artist.Id" class="hdr" style="font-size:18px;">@artist.UserName</a>
                }
                <a class="hdr">Описание концерта:</a>
                <InputTextArea Style="font-size:18px; padding: 0.5rem;" id="desc" @bind-Value="@newConcert.Description" class="descInput" />
                <button type="submit" class="btn btn-primary">Подтвердить</button>
            }
            else
            {
                <a class="hdr">Дата концерта:</a>
                <InputDate class="myDate" id="date" @bind-Value="@newConcert.Date" disabled />
                if (newConcert.ConcertHall != null)
                {
                    <a class="hdr">Концертная площадка:</a>
                    <a href="/concerthall/@newConcert.ConcertHall.Id" class="hdr" Style="font-size:18px;">@newConcert.ConcertHall.Address</a>
                }
                <a class="hdr">Артисты:</a>
                foreach (var artist in concertArtists)
                {
                    <a href="/user/@artist.Id" class="hdr" style="font-size:18px;">@artist.UserName</a>
                }
                <a class="hdr">Описание концерта:</a>
                <InputTextArea Style="font-size:18px; padding: 0.5rem;" id="desc" @bind-Value="@newConcert.Description" class="descInput" disabled />
            }
        </EditForm>
    </div>
</div>

@code {
    int zoom = 6;
    string clickedPosition = "";

    private ICollection<ConcertHall> concertHalls;
    private ICollection<Concert> concerts;
    private bool isArtist;
    private List<Artist> concertArtists = new List<Artist>();
    Artist artist;
    Concert newConcert = new Concert();
    GoogleMapPosition pos = new GoogleMapPosition() { Lat = 55.7491, Lng = 37.6258 };

    protected override async Task OnInitializedAsync()
    {
        concertHalls = await ConcertHallRep.GetAllConcertHalls();
        concerts = await ConcertRepository.GetAllConcerts();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var auser = authState.User;
        var user = await userManager.GetUserAsync(auser);
        isArtist = auser.IsInRole("Artist");

        if (isArtist)
            artist = (Artist)user;
    }

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        clickedPosition = $"Map clicked LAT: {args.Position.Lat}, LNG: {args.Position.Lng}";
        pos.Lat = args.Position.Lat;
        pos.Lng = args.Position.Lng;
        newConcert = new Concert();
        concertArtists = new List<Artist>();
    }

    private async Task OnMarkerClick(RadzenGoogleMapMarker args)
    {
        clickedPosition = $"Map {args.Title} clicked LAT: {args.Position.Lat}, LNG: {args.Position.Lng}";
        var foundConcert = await ConcertRepository.GetConcertById(Convert.ToInt32(args.Title));
        newConcert = foundConcert;
        concertArtists = await ConcertRepository.GetArtistsOfConcert(foundConcert);
        pos.Lat = foundConcert.Position.Lat;
        pos.Lng = foundConcert.Position.Lng;
    }

    private async Task InsertConcert()
    {
        var concertHall = await ConcertHallRep.GetConcertHallByAddress("Street Concert");
        var conc = await ConcertRepository.GetConcertByPosition(pos);

        newConcert.Position = pos;

        Concert concert = new Concert
        {
            Description = newConcert.Description,
            Date = newConcert.Date,
            Position = newConcert.Position,
            ConcertHall = concertHall,
            ConcertHallId = concertHall.Id,
            Artists = new List<Artist>()
        };

        if (conc != null)
        {
            await ConcertRepository.UpdateConcert(conc);
        }

        else
        {
            concert.Artists.Add(artist);

            await ConcertRepository.AddConcert(concert);

            concerts.Add(concert);
        }

        pos = new GoogleMapPosition() { Lat = 55.7491, Lng = 37.6258 };
        newConcert = new Concert();
    }
}
