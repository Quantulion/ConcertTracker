@page "/concert/{Id}"

@using BusinessLayer.Interfaces
@using DataLayer.Entities
@using Microsoft.AspNetCore.Identity;

@inject ICommentRepository CommentRepository
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<User> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRepository UserRepository
@inject NavigationManager NavigationManager
@inject IConcertRepository ConcertRepository

<div class="concertPage">
    <a href="" class="mainText">ConcertTracker</a>
    <img src="Images/manhattan-1674404_1920 1.png"
         alt=""
         class="concertImage" />
    <div class="concertContainer">
        <div class="concertItem">
            <p class="hdr">Концертная площадка:</p>
            @if (foundConcert.ConcertHall != null)
            {
                <a href="/concerthall/@foundConcert.ConcertHall.Id">@foundConcert.ConcertHall.Name</a>
            }
        </div>
        <div class="concertItem">
            <p class="hdr">Описание:</p>
            <p>
                @foundConcert.Description
            </p>
        </div>
        <div class="concertItem">
            <p class="hdr">Дата:</p>
            <p>@foundConcert.Date.ToString()</p>
        </div>
        <div class="concertItem">
            <p class="hdr">Артисты:</p>
            @foreach (var artist in concertArtists)
            {
                <a href="/user/@artist.Id">@artist.UserName</a>
            }
        </div>
        <AuthorizeView Roles="Admin"><button @onclick="DeleteConcert">Delete</button></AuthorizeView>
    </div>
</div>

<EditForm Model="@newComment" OnValidSubmit="@AddComment" class="commentSection">
    <p class="hdr">Comments:</p>
    <div class="commentInput">
        <InputTextArea @bind-Value="@newComment.Content" ></InputTextArea>
        <button type="submit">Publish</button>
    </div>
    @foreach (var comment in concertComments)
    {
        <div class="comment">
            <img src="/uploads/@comment.User.Photo" alt="">
            <a href="/user/@comment.UserId" class="commentData">
                <p>@comment.User.UserName</p>
                <p>@comment.Content</p>
                <p>@comment.PublishTime.ToString()</p>
            </a>
            <button type="button" @onclick="@(async () => { await AddLike(comment); })">Like</button>
            @{ 
                <p class="likesCount">@comment.Likes.Count.ToString()</p>
            }
        </div>
                }
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    private Concert foundConcert = new Concert();
    private List<Artist> concertArtists = new List<Artist>();
    private List<Comment> concertComments = new List<Comment>();
    private User currentUser = new User();
    private Comment newComment = new Comment();

    protected override async Task OnInitializedAsync()
    {
        foundConcert = await ConcertRepository.GetConcertByIdAsync(Convert.ToInt32(Id));
        concertArtists = await ConcertRepository.GetArtistsOfConcertAsync(foundConcert);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = await userManager.GetUserAsync(authState.User);

        await GetAllComments();
    }

    private async Task DeleteConcert()
    {
        await ConcertRepository.DeleteConcertAsync(foundConcert);
        NavigationManager.NavigateTo("map");
    }

    private async Task AddComment()
    {
        newComment.Likes = new List<UserComment>();
        await CommentRepository.AddCommentAsync(newComment, currentUser, foundConcert);
        newComment = new Comment();
    }

    private async Task<List<Comment>> GetAllComments()
    {
        concertComments = await ConcertRepository.GetCommentsOfConcertAsync(foundConcert);
        List<Comment> comments = new List<Comment>();
        foreach (var comment in concertComments)
        {
            var user = await UserRepository.GetUserByIdAsync(comment.UserId);
            comment.User = user;

            var likes = await CommentRepository.GetLikesOfCommentAsync(comment);
            comment.Likes = likes;
        }
        return concertComments;
    }

    private async Task AddLike(Comment comment)
    {
        await CommentRepository.PressLikeAsync(comment, currentUser);
    }

    private async Task<int> LikesCount(Comment comment)
    {
        return await CommentRepository.LikesCountAsync(comment);
    }

}
