@page "/search"

@using BusinessLayer.Interfaces
@using DataLayer.Entities

@inject IConcertHallRepository ConcertHallRepository
@inject IArtistRepository ArtistRepository
@inject IGenreRepository GenreRepository

<EditForm Model="@searchModel" OnValidSubmit="@search" class="searchPage">
    <a href="" class="mainText">ConcertTracker</a>
    <div class="searchContainer">
        <div class="leftPart">
            <InputText Style="font-size: 24px; padding-left: 20px;" class="searchInput" id="searchText" @bind-Value="@searchModel.SearchText" />
            <button type="submit" class="btn btn-primary" style="width: 10%; height: 5%; font-size:20px;">Поиск</button>

            <div class="foundItems">
                <p style="opacity:0;">@searchModel.GetAllObjects();</p>

                @for (int j = 0; j < 3; j++)
                {
                    if (i + j < searchModel.list.Count)
                    {
                        if (searchModel.list[i + j].GetType() == typeof(Artist))
                        {
                            Artist foundArtist = (Artist)searchModel.list[i + j];
                            <a href="/user/@foundArtist.Id" class="foundItem">
                                <img src="/uploads/@foundArtist.Photo" alt="Alternate Text" />
                                <div class="foundItemText">
                                    <p id="Name">@foundArtist.UserName</p>
                                    <p>Description: @foundArtist.Description</p>
                                </div>
                            </a>
                        }
                        if (searchModel.list[i + j].GetType() == typeof(ConcertHall))
                        {
                            ConcertHall foundConcertHall = (ConcertHall)searchModel.list[i + j];
                            <a href="/concerthall/@foundConcertHall.Id" class="foundItem">
                                <img src="/uploads/@foundConcertHall.Photo" alt="Alternate Text" />
                                <div class="foundItemText">
                                    <p id="Name">@foundConcertHall.Name</p>
                                    <p>Description: @foundConcertHall.Description</p>
                                </div>
                            </a>
                        }
                    }
                }
            </div>
        </div>
        <div class="rightPart">
            <p class="hdr">Filters:</p>
            <div class="filterItem">
                <InputCheckbox DisplayName="Concert Halls" @bind-Value="@searchModel.Filter.AddArtists"></InputCheckbox>
                <p>Artists</p>
            </div>
            <div class="filterItem">
                <InputCheckbox DisplayName="Concert Halls" @bind-Value="@searchModel.Filter.AddConcertHalls"></InputCheckbox>
                <p>Concert Halls</p>
            </div>
            <RadzenListBox @bind-Value=@selectedGenres Multiple="true" Data=@searchModel.genres
                           TextProperty="Name" ValueProperty="Name" Change="@OnChange" Style="height:100%" />
        </div>
    </div>
    <div class="arrows">
        <img @onclick="@decI" src="Images/next 1.svg" alt="" />
        <img @onclick="@incI" src="Images/next.svg" alt="" />
    </div>
</EditForm>

@code {



    public class SearchModel
    {
        public string SearchText { get; set; }

        public ICollection<ConcertHall> concertHalls;

        public ICollection<Genre> genres;

        public ICollection<Genre> selectedGenres;

        public ICollection<Artist> artists;

        public FilterModel Filter = new FilterModel();

        public List<object> list = new List<object>();

        public List<object> GetAllObjects()
        {
            List<object> x = new List<object>();
            if (concertHalls != null && Filter.AddConcertHalls)
                x.AddRange(concertHalls);
            if (artists != null && Filter.AddArtists)
                x.AddRange(artists);
            list = x;
            return list;
        }
    }

    public class FilterModel
    {
        public FilterModel()
        {
            AddArtists = true;
            AddConcertHalls = true;
        }
        public bool AddArtists { get; set; }
        public bool AddConcertHalls { get; set; }

    }

    private SearchModel searchModel = new SearchModel();

    private IEnumerable<string> selectedGenres = new string[] { "Empty" };

    private int i = 0;

    public void search()
    {
        List<object> x = new List<object>();
        foreach (var item in searchModel.GetAllObjects())
        {
            if (item.ToString().Contains(searchModel.SearchText))
                x.Add(item);
        }
        searchModel.list = x;
        i = 0;
    }

    public void incI()
    {
        if (i < searchModel.list.Count() - 3)
            i += 3;
        else i = 0;
    }

    public void decI()
    {
        if (i > 2)
            i -= 3;
        else i = (searchModel.list.Count() / 3) * 3;
    }

    protected override async Task OnInitializedAsync()
    {
        searchModel.concertHalls = await ConcertHallRepository.GetAllConcertHalls();
        searchModel.genres = await GenreRepository.GetAllGenres();
        searchModel.artists = await ArtistRepository.GetAllArtists();
        searchModel.GetAllObjects();

        List<string> x = new List<string>();
        foreach (var genre in await GenreRepository.GetAllGenres())
        {
            x.Add(genre.Name);
        }
        selectedGenres = (IEnumerable<string>)x;
    }

    private async Task OnChange()
    {
        List<Genre> genreList = new List<Genre>();
        foreach (var genre in selectedGenres)
        {
            var x = await GenreRepository.GetGenreByName(genre);
            genreList.Add(x);
        }
        searchModel.selectedGenres = genreList;
    }
}
