@page "/search"

@using BusinessLayer.Interfaces
@using DataLayer.Entities

@inject IConcertHallRepository ConcertHallRepository
@inject IArtistRepository ArtistRepository
@inject IGenreRepository GenreRepository

<EditForm Model="@searchModel" OnValidSubmit="@search" class="searchPage">
    <a href="" class="mainText">ConcertTracker</a>
    <div class="searchContainer">
        <div class="leftPart">
            <InputText Style="font-size: 24px; padding-left: 20px;" class="searchInput" id="searchText" @bind-Value="@searchModel.SearchText" />
            <button type="submit" class="btn btn-primary" style="width: 10%; height: 5%; font-size:20px;">Search</button>

            <div class="foundItems">
                @for (int j = 0; j < 3; j++)
                {
                    if (i + j < searchModel.ObjectsList.Count)
                    {
                        if (searchModel.ObjectsList[i + j].GetType() == typeof(Artist))
                        {
                            Artist foundArtist = (Artist)searchModel.ObjectsList[i + j];
                            <a href="/user/@foundArtist.Id" class="foundItem">
                                @if (foundArtist.Photo != null)
                                {
                                    if (foundArtist.Photo.Contains("http"))
                                    {
                                        <img src="@foundArtist.Photo">
                                    }
                                    else
                                    {
                                        <img src="/uploads/@foundArtist.Photo" alt="Alternate Text"/>
                                    }
                                }
                                <div class="foundItemText">
                                    <p id="Name">@foundArtist.UserName</p>
                                    <p>Description: @foundArtist.Description</p>
                                </div>
                            </a>
                        }
                        if (searchModel.ObjectsList[i + j].GetType() == typeof(ConcertHall))
                        {
                            ConcertHall foundConcertHall = (ConcertHall)searchModel.ObjectsList[i + j];
                            <a href="/concerthall/@foundConcertHall.Id.ToString()" class="foundItem">
                                @if (foundConcertHall.Photo != null)
                                {
                                    @if (foundConcertHall.Photo.Contains("http"))
                                    {
                                        <img src="@foundConcertHall.Photo" alt="Alternate Text"/>
                                    }
                                    else
                                    {
                                        <img src="/uploads/@foundConcertHall.Photo" alt="Alternate Text"/>
                                    }
                                }
                                <div class="foundItemText">
                                    <p id="Name">@foundConcertHall.Name</p>
                                    <p>Description: @foundConcertHall.Description</p>
                                </div>
                            </a>
                        }
                    }
                }
            </div>
        </div>
        <div class="rightPart">
            <p class="hdr">Filters:</p>
            <div class="filterItem">
                <RadzenCheckBox TValue="bool" Change=OnCheckboxChange DisplayName="Concert Halls" @bind-Value="@searchModel.Filter.AddArtists" ></RadzenCheckBox>
                <p>Artists</p>
            </div>
            <div class="filterItem">
                <RadzenCheckBox TValue="bool" Change=OnCheckboxChange DisplayName="Concert Halls" @bind-Value="@searchModel.Filter.AddConcertHalls"></RadzenCheckBox>
                <p>Concert Halls</p>
            </div>
            <RadzenListBox @bind-Value=@allGenres Multiple="true" Data=@searchModel.Genres
                           TextProperty="Name" ValueProperty="Name" Change="@OnChange" Style="height:100%" Name="Genres"/>
        </div>
    </div>
    <div class="arrows">
        <img @onclick="@decI" src="Images/next 1.svg" alt="" />
        <img @onclick="@incI" src="Images/next.svg" alt="" />
    </div>
</EditForm>

@code {



    public class SearchModel
    {
        public string SearchText { get; set; }

        public ICollection<ConcertHall> ConcertHalls;

        public ICollection<Genre> Genres;

        public ICollection<Genre> SelectedGenres = new List<Genre>();

        public ICollection<Artist> Artists;

        public FilterModel Filter = new FilterModel();

        public List<object> ObjectsList = new List<object>();

        public List<object> GetObjects()
        {
            List<object> x = new List<object>();
            if (ConcertHalls != null && Filter.AddConcertHalls)
                x.AddRange(ConcertHalls);
            if (Artists != null && Filter.AddArtists)
            {
                foreach (var artist in Artists)
                {
                    int genresCount = 0;
                    foreach (var genre in SelectedGenres)
                    {
                        if (artist.Genres.Contains(genre))
                            genresCount++;
                    }
                    if(genresCount != 0)
                        x.Add(artist);
                }
            }
            ObjectsList = x;
            return ObjectsList;
        }
    }

    public class FilterModel
    {
        public FilterModel()
        {
            AddArtists = true;
            AddConcertHalls = true;
        }
        public bool AddArtists { get; set; }
        public bool AddConcertHalls { get; set; }

    }

    private SearchModel searchModel = new SearchModel();

    private IEnumerable<string> allGenres = new string[] { "Empty" };

    protected override async Task OnInitializedAsync()
    {
        searchModel.ConcertHalls = await ConcertHallRepository.GetAllConcertHallsAsync();
        searchModel.Genres = await GenreRepository.GetAllGenresAsync();
        searchModel.Artists = await ArtistRepository.GetAllArtistsAsync();
        searchModel.SelectedGenres = searchModel.Genres;
        await GetArtistsWithGenres(searchModel.Artists);

        List<string> x = new List<string>();
        foreach (var genre in searchModel.Genres)
        {
            x.Add(genre.Name);
        }
        allGenres = (IEnumerable<string>)x;
        
        searchModel.GetObjects();
    }
    
    private void search()
    {
        List<object> x = new List<object>();
        foreach (var item in searchModel.GetObjects())
        {
            if (item.ToString().Contains(searchModel.SearchText))
                x.Add(item);
        }
        searchModel.ObjectsList = x;
        i = 0;
    }

    private int i = 0;

    private void incI()
    {
        if (i < searchModel.ObjectsList.Count() - 3)
            i += 3;
        else i = 0;
    }

    private void decI()
    {
        if (i > 2)
            i -= 3;
        else if (i%3 != 0 || i < 3) 
            i = (searchModel.ObjectsList.Count() / 3) * 3;
        else 
            i = (searchModel.ObjectsList.Count() / 3 - 1) * 3;
    }

    private async Task GetArtistsWithGenres(ICollection<Artist> artists)
    {
        foreach (var artist in artists)
        {
            artist.Genres = await GenreRepository.GetGenresOfArtistAsync(artist) as List<Genre>;
        }
    }

    private async Task OnChange()
    {
        List<Genre> genreList = new List<Genre>();
        foreach (var genre in allGenres)
        {
            var x = await GenreRepository.GetGenreByNameAsync(genre);
            genreList.Add(x);
        }
        searchModel.SelectedGenres = genreList;
        searchModel.GetObjects();
    }

    private void OnCheckboxChange()
    {
        searchModel.GetObjects();
    }

}
